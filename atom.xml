<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZE&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-10T09:07:44.172Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lennon1994</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx看这一篇就够了</title>
    <link href="http://yoursite.com/2018/10/10/nginx%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>http://yoursite.com/2018/10/10/nginx看这一篇就够了/</id>
    <published>2018-10-10T06:47:59.135Z</published>
    <updated>2018-10-10T09:07:44.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx看这一篇就够了"><a href="#nginx看这一篇就够了" class="headerlink" title="nginx看这一篇就够了"></a>nginx看这一篇就够了</h1><p>不可否认，这次我标题党了，如果想了解底层还是得多找一些资料，但是从<strong>蒙蔽状态</strong>到 <strong>‘ 奥，原来是这样 ’</strong> 看这一篇就够了，也是我自己的学习过程。工作中经常用到但是一般都不用自己动手配，本着由浅入深的原则看了看之前做的笔记，不求甚解，知其然知其所以然，巴拉巴拉的。</p><a id="more"></a> <p><em>杂记</em></p><ul><li>换工作6个月了，博客也就断更了6个月，一家做供应链金融的金融公司，一涉及到钱就变得谨慎又无聊，内心还要谴责万恶的资本主，感觉之前卖饭挺好的，和之前的同事聊，说我们几个走了之后技术部开发效率、水平指数下降(内心有点小激动，从宝哥身上学到的手快和不羁)，还好还好，生活实苦，请足够相信。</li></ul><p>##1.nginx概述</p><ul><li>nginx是高性能反向代理服务器，也是web服务器，就是同比与tomcat，apache，netty，jetty等。</li><li>说到反向代理，先讲一下正向代理。<ul><li>科学上网就是正向代理，本地client —-&gt;  vps服务器—-&gt; google    ,因为本地访问不到google，所以需要代理服务器。</li><li>反向代理就是请求到google之后做的事。原先假设google  —&gt; 80端口tomcat  ,但是现在需要高可用请求到多个tomcat或者一台机器端口不同多个服务，那么  本地client —&gt;  google —&gt;  nginx转发到固定端口，或者根据权重分发到不同端口的tomcat。因为根据域名过来的请求都是访问到80端口，所以需要反向代理。</li></ul></li><li>根据资料，nginx可以承受5万的并发量，而且内存占用量少，所以目前市场占额超过50%。</li><li>另外nginx还有很多强大的功能，限制ip段访问、限制带宽、限制最大连接数、邮件代理、重定向、压缩、缓存、也有扩展模块。</li></ul><p>##2.nginx在linux下的安装</p><p>网上nginx安装的博客一堆，也包括很多转发坟贴，<strong>版本号要注意！！！</strong>，避免出现因为版本导致的问题。</p><p><strong>所以建议 在安装之前 去对应的官网查询版本号</strong></p><ol><li><p>nginx安装依赖3个包，以及是否有make和gcc工具</p><ul><li><p>安装make</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure></li><li><p>安装gcc</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>安装PCRE库（正则表达式库）</p><p>   <a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/" target="_blank" rel="noopener">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/</a> 下载最新的 PCRE 源码包，使用下面命令下载编译和安装 PCRE 包：（本文参照下载文件版本：若想下载最新版本请打开上面网址。本文选择pcre-8.39.tar.gz）</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz </span><br><span class="line">tar -zxvf pcre-8.39.tar.gz</span><br><span class="line">cd pcre-8.39</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装zlib库</p><p>   <a href="http://zlib.net/zlib-1.2.11.tar.gz" target="_blank" rel="noopener">http://zlib.net/zlib-1.2.11.tar.gz</a> 下载最新的 zlib 源码包，使用下面命令下载编译和安装 zlib包：（本文参照下载文件版本：若想下载最新版本请打开上面网址。本文选择zlib-1.2.11.tar.gz ） </p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line"> </span><br><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>安装openssl<strong>（某些vps默认没装ssl)</strong></p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget https://www.openssl.org/source/openssl-1.0.1t.tar.gz</span><br><span class="line">tar -zxvf openssl-1.0.1t.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装nginx</p><p>   本文采用版本为1.9.9，了解最新版本请去 <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget http://nginx.org/download/nginx-1.9.9.tar.gz</span><br><span class="line">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class="line">cd nginx-1.9.9</span><br><span class="line">./configure --prefix /usr/local/src</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>   <em>–prefix</em>  表示指定nginx安装到的目录，默认安装在 /usr/local/nginx 下</p></li></ul><p>完成以上步骤启动nginx（到<em>/nginx/sbin/</em>目录下   <em>./nginx</em>  即可），访问ip，即可出现以下页面</p><p><img src="C:\Users\admin\AppData\Local\Temp\1537943691474.png" alt="1537943691474"></p><p>2.安装可能遇到的问题</p><blockquote><p>报错：./nginx: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory</p></blockquote><p>这是由于lib里包版本不对导致的，解决方法是，删掉  <strong><em>./lib</em></strong> 或者  <strong><em>./lib64</em></strong>  中的  <strong>libpcre.so.1</strong>  ，然后根据系统是32位还是64位，执行下方命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查询linux是32位还是64位</span><br><span class="line">[root@host lib]# getconf LONG_BIT</span><br><span class="line">32</span><br><span class="line">如果是32位系统</span><br><span class="line">[root@host lib]# ln -s /usr/local/lib/libpcre.so.1 /lib</span><br><span class="line">如果是64位系统</span><br><span class="line">[root@host lib]# ln -s /usr/local/lib/libpcre.so.1 /lib64</span><br><span class="line">然后在启动nginx就OK了</span><br></pre></td></tr></table></figure></li></ol><p>##3.nginx启动关闭命令</p><p>nginx的目录很简单明了，基础的为4个：</p><p>sbin    启动目录</p><p>conf   配置信息目录</p><p>html   浏览器访问到的静态页面</p><p>logs    默认的日志打印目录</p><ul><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//进到sbin目录 执行下方命令，默认使用/conf/nginx.conf文件</span><br><span class="line">[root@host sbin]# ./nginx</span><br><span class="line">//指定conf文件</span><br><span class="line">[root@host sbin]# ./nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">//nginx 测试配置文件是否正确  返回如下表示成功</span><br><span class="line">[root@host sbin]# ./nginx -t </span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure></li><li><p>重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.先停止，后启动</span><br><span class="line">2.进到sbin目录 执行下方命令，</span><br><span class="line">[root@host sbin]# ./nginx -s reload</span><br><span class="line">一般执行这个操作前  会  ./nginx -t   test一下</span><br></pre></td></tr></table></figure></li><li><p>停止nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.使用nginx命令停止</span><br><span class="line">[root@host sbin]# ./nginx -s quit   完整有序的停止nginx</span><br><span class="line">[root@host sbin]# ./nginx -s stop   快速停止nginx</span><br><span class="line"></span><br><span class="line">2.查询进程，杀死进程</span><br><span class="line">[root@host sbin]# ps -ef | grep nginx</span><br><span class="line">root     27768     1  0 02:57 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   27769 27768  0 02:57 ?        00:00:00 nginx: worker process</span><br><span class="line">root     27771 27656  0 02:57 pts/0    00:00:00 grep nginx</span><br><span class="line">[root@host sbin]# kill -QUIT 主进程号     ：从容停止Nginx</span><br><span class="line">[root@host sbin]# kill -TERM 主进程号     ：快速停止Nginx</span><br><span class="line">[root@host sbin]# kill -9 主进程号        ：强制停止Nginx</span><br><span class="line">[root@host sbin]# pkill -9 nginx      ：强制停止Nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-nginx-conf文件详解"><a href="#4-nginx-conf文件详解" class="headerlink" title="4.nginx.conf文件详解"></a>4.nginx.conf文件详解</h2><p>nginx.conf文件主要分为3块</p><p>main     全局模块 写在最外部</p><p>events   用events括号包裹</p><p>http     <code>http块</code>中包含<code>http全局块</code>和多个<code>server块</code>，每个<code>server</code>块中包含<code>server全局块</code>和多个<code>location块</code>，采用<code>就近原则</code>生效 </p><p>以下是官方最简单的配置模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">user nobody nobody;    #所有用户具有启停权限  不做限制</span><br><span class="line">worker_processes  1;   # 如果设置为数字，启动以后就具有多少个worker process</span><br><span class="line">pid logs/nginx.pid;   #pid日志打印目录   默认存放在logs/nginx.pid</span><br><span class="line">error_log  /var/log/nginx/error.log warn;   #定义nginx错误日志打印目录，以及等级</span><br><span class="line">events &#123;</span><br><span class="line">epoll;             #一般不配置，事件驱动模型</span><br><span class="line">    worker_connections  1024;  #允许每一个WP同事开启的最大连接数。此值不能大于操作系统支持的打开  #的最大文件句柄数.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   </span><br><span class="line">    default_type  application/octet-stream;  #默认为 text/plain</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;   #设置用户会话连接的保持时间，即超时时间</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;    #监听80端口</span><br><span class="line">        server_name  localhost;   #访问过来的网站域名</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;       #访问的html的存放路径</span><br><span class="line">            index  index.html index.htm;   #主页为html/index.html</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为基本配置，可以增加server块满足更多场景，但是生产环境的用法还是有区别的。</p><p>接下来为了能了解到整个流程，进行以下的实验</p><ol><li><p>添加如下server块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  www.zeerdaye.com;</span><br><span class="line">   </span><br><span class="line">       location / &#123;</span><br><span class="line">           root   html/zeerdaye;     #这样访问域名，打开的静态网页就</span><br><span class="line">           #是/usr/local/nginx/html/zeerdaye/index</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       error_page   500 502 503 504  /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>在/usr/local/nginx/html  下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir zeerdaye</span><br><span class="line">cd zeerdaye</span><br><span class="line">vim index.html   #随便写点东西  我写的 welcome to zeerdaye's blog</span><br></pre></td></tr></table></figure></li><li><p>修改本地host </p><p>配置ip，域名</p><p><img src="C:\Users\admin\AppData\Local\Temp\1537947548370.png" alt="1537947548370"></p><p>输入网址即可访问到</p><p><img src="C:\Users\admin\AppData\Local\Temp\1537947604721.png" alt="1537947604721"></p></li></ol><p>##5.生产场景的应用</p><p>生产场景，为了便于管理，会将server分开存放，再include到nginx.conf文件中。</p><p>下面举一个负载均衡的例子：</p><p>nginx.conf配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> worker_processes  1;</span><br><span class="line"> events &#123;</span><br><span class="line">     worker_connections  1024;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> http &#123;</span><br><span class="line">     include       mime.types;</span><br><span class="line">     default_type  application/octet-stream;</span><br><span class="line">     sendfile        on;</span><br><span class="line">     keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">     include /usr/local/nginx/conf/conf.d/*.conf;  #新建conf.d目录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>conf.d下包含多个配置server的conf文件，和一个配置upstream的conf文件</p><p>upstream 配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upstream demoserver&#123;</span><br><span class="line">    ip_hash;      #自定义负载均衡规则  默认轮训</span><br><span class="line">                  #ip_hash 根据ip的hash值判断; </span><br><span class="line">                  #url_hash 根据url的hash值判断</span><br><span class="line">                  #fair 根据响应时间判断</span><br><span class="line">                  #在端口号后添加 weight = 1(权重自定义) 来开启权重的配置规则</span><br><span class="line">    server 127.0.0.1:8081;</span><br><span class="line">    server 127.0.0.1:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="http://www.demo.conf" target="_blank" rel="noopener">www.demo.conf</a></strong> 的配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">          listen 80;</span><br><span class="line">          server_name www.demo.com;</span><br><span class="line"> </span><br><span class="line">          location /&#123;</span><br><span class="line">              proxy_pass http://demoserver;   #这里的demoserver需要和upstream一致</span><br><span class="line">                                              #实际就是做一下转发，所以请求头的内容会因为转发</span><br><span class="line">                                              #发生改变，所以最好自己定义一下</span><br><span class="line">              proxy_set_header Host $host;    </span><br><span class="line">              proxy_set_header real_IP $remote_addr;  #真正请求来源的ip  java取的时候</span><br><span class="line">                                                      #getHeader(&quot;real_IP&quot;)即可</span><br><span class="line">          &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，访问<a href="http://www.demo.com的时候，就会根据ip的hash值，判断访问8081还是8082的服务了。" target="_blank" rel="noopener">www.demo.com的时候，就会根据ip的hash值，判断访问8081还是8082的服务了。</a></p><p>生产环境 如果一个服务器有多个服务，配置多个server即可。</p><p>最后 写一些可以扩展的配置，有兴趣可以查一下：rewrite实现转发，gzip实现压缩，expire实现浏览器缓存。</p><p>这里放一些在网上找到的应用：</p><p>Nginx  禁止ip访问</p><p><a href="https://blog.csdn.net/xiaocao12/article/details/52304097" target="_blank" rel="noopener">https://blog.csdn.net/xiaocao12/article/details/52304097</a></p><p>线上配置实例</p><p><a href="https://blog.csdn.net/netdxy/article/details/79423444" target="_blank" rel="noopener">https://blog.csdn.net/netdxy/article/details/79423444</a></p><p>conf配置</p><p><a href="https://blog.csdn.net/u010209217/article/details/77854929" target="_blank" rel="noopener">https://blog.csdn.net/u010209217/article/details/77854929</a></p><p>最后，有各种想法，加我好友即可，以后会维护公众号的。</p><p><img src="C:\Users\admin\AppData\Local\Temp\1537948003891.png" alt="1537948003891"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nginx看这一篇就够了&quot;&gt;&lt;a href=&quot;#nginx看这一篇就够了&quot; class=&quot;headerlink&quot; title=&quot;nginx看这一篇就够了&quot;&gt;&lt;/a&gt;nginx看这一篇就够了&lt;/h1&gt;&lt;p&gt;不可否认，这次我标题党了，如果想了解底层还是得多找一些资料，但是从&lt;strong&gt;蒙蔽状态&lt;/strong&gt;到 &lt;strong&gt;‘ 奥，原来是这样 ’&lt;/strong&gt; 看这一篇就够了，也是我自己的学习过程。工作中经常用到但是一般都不用自己动手配，本着由浅入深的原则看了看之前做的笔记，不求甚解，知其然知其所以然，巴拉巴拉的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2014/12/22/hello-world/"/>
    <id>http://yoursite.com/2014/12/22/hello-world/</id>
    <published>2014-12-22T04:39:04.000Z</published>
    <updated>2018-10-10T09:04:36.038Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><a id="more"></a> <h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
